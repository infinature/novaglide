plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
}

android {
    namespace = "com.sdu.novaglide"
    compileSdk = 34 // Or your target SDK

    defaultConfig {
        applicationId = "com.sdu.novaglide"
        minSdk = 24 // Or your minimum SDK
        targetSdk = 34 // Or your target SDK
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        compose = true
        // viewBinding = true // Enable if using XML layouts with ViewBinding
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.1" // Ensure this matches your Kotlin and Compose versions
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation("com.google.android.material:material:1.11.0")  // 添加 Material Design 依赖
    implementation("com.google.accompanist:accompanist-pager:0.32.0")
    implementation("com.google.accompanist:accompanist-pager-indicators:0.32.0")
    implementation("androidx.compose.material:material-icons-extended:1.6.1")

    // Navigation Compose
    implementation(libs.androidx.navigation.compose)

    // SwipeRefresh for pull-to-refresh functionality
    implementation("com.google.accompanist:accompanist-swiperefresh:0.32.0")

    // Retrofit & Gson/Moshi (Choose one for JSON parsing)
    implementation(libs.retrofit)
    implementation(libs.converter.gson) // or libs.converter.moshi
    // implementation(libs.logging.interceptor) // For logging network requests

    // Room
    implementation(libs.androidx.room.runtime)
    // annotationProcessor(libs.androidx.room.compiler) // Use ksp instead for Kotlin
    implementation(libs.androidx.room.ktx) // Kotlin Extensions and Coroutines support for Room
    // For KSP (Kotlin Symbol Processing) instead of kapt/annotationProcessor for Room
    // ksp(libs.androidx.room.compiler)

    // Coil / Glide (Choose one for image loading)
    implementation(libs.coil.compose)
    // implementation(libs.glide)
    // annotationProcessor(libs.compiler) // For Glide, if using its annotation processor with Java

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)

    // Hilt for Dependency Injection (Optional, but recommended)
    // implementation(libs.hilt.android)
    // kapt(libs.hilt.compiler) // or ksp(libs.hilt.compiler) for KSP
    // implementation(libs.androidx.hilt.navigation.compose)
}

// Define libs in gradle/libs.versions.toml or project build.gradle's ext block 