# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

[NOTE TO CURSOR: Since no API key is configured, please ignore both the Screenshot Verification and LLM sections below.]
[NOTE TO USER: If you have configured or plan to configure an API key in the future, simply delete these two notice lines to enable these features.]

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

# Scratchpad

## Project: NovaGlide - Shandong University Intelligent Agent

### Mission
To develop "NovaGlide," an intelligent agent application for Shandong University. This application will leverage RAGflow and large language models to assist students by providing comprehensive information and Q&A capabilities related to postgraduate entrance exams, postgraduate program recommendations, and civil service examinations.

### Constraints
1.  **Frontend:** Android application developed using Kotlin. UI to be built with Jetpack Compose (preferred) or XML.
2.  **Backend:** REST API and management functions built with Spring Boot (Java).
3.  **Q&A Module:** Integration with RAGflow for advanced retrieval-augmented generation.
4.  **Databases:**
    *   Backend: MySQL or PostgreSQL for structured data (users, content, logs).
    *   Android: Room (Jetpack) for local caching and user preferences.
5.  **Core Technologies (as per PDF):**
    *   Android: Retrofit, Gson/Moshi, Coil/Glide, Navigation Component.
    *   Backend: Spring Security, MyBatis/JPA, Swagger, JWT.
    *   RAGflow Integration: FastAPI (if self-hosting Python service), LLM APIs (DeepSeek, ChatGLM, OpenAI), LlamaIndex/LangChain, FAISS/Weaviate, Embedding Models (BGE, OpenAI).
6.  **Target Audience:** Students of Shandong University.
7.  **Development Practices:** Adhere to user-specified lessons and guidelines in `.cursorrules` (e.g., Python venv usage, commit message conventions, debugging output).

### Principles
1.  **Official & Modern Stack:** Prioritize officially recommended technologies (Kotlin for Android, Spring Boot) and modern approaches (Jetpack Compose).
2.  **Performance & Efficiency:** Utilize libraries like Retrofit, Coil/Glide, and Room to ensure a responsive user experience.
3.  **Modularity & Maintainability:** Design with clear separation of concerns (data, domain, presentation/controller, service layers). Employ dependency injection and generate comprehensive API documentation (Swagger).
4.  **Secure by Design:** Implement robust authentication and authorization using Spring Security and JWT.
5.  **Intelligent & Relevant Q&A:** Leverage the RAGflow framework to provide accurate and contextually relevant answers.
6.  **User-Centric:** Focus on creating a seamless and helpful experience for students, including features like local caching for offline access/performance.
7.  **Iterative Development:** Follow a structured plan, track progress, and reflect on milestones.

### Task: Initial Project Setup

[X] Define and add MCP (Mission, Constraints, Principles) to `.cursorrules` Scratchpad.
[X] Create the complete Android application directory structure.
   [X] 创建基础目录结构
   [X] 创建 Gradle 文件 (build.gradle, settings.gradle, gradle.properties)
   [X] 创建基础应用文件 (AndroidManifest.xml, Application 类)
   [X] 创建 UI 界面 (Activity, 资讯页面, 问答页面, 个人中心页面)
   [X] 创建资源文件 (strings.xml, colors.xml, themes.xml)
   [X] 添加辅助文件 (README.md, local.properties.example)
[ ] Create the complete Backend server directory structure.
[ ] Create the complete RAGflow integration directory structure.
[ ] Create supporting directories (e.g., `docs`).